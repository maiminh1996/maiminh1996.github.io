<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>MAI Minh&apos;s Page</title> <description>Computer Science Blog | Nguyen Anh Minh MAI, AI Research Engineer </description> <link>https://maiminh1996.github.io//</link> <atom:link href="https://maiminh1996.github.io//feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Tue, 29 Jul 2025 12:53:37 +0000</pubDate> <lastBuildDate>Tue, 29 Jul 2025 12:53:37 +0000</lastBuildDate> <generator>Jekyll v4.3.4</generator> <item> <title>Enabling image copy-paste in markdown</title> <description>&lt;p&gt;In 2023, VS Code supports copying and pasting images directly into Markdown files starting from &lt;a href=&quot;https://code.visualstudio.com/updates/v1_79#_copy-external-media-files-into-workspace-on-drop-or-paste-for-markdown&quot;&gt;Stable v1.79&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&quot;upgrade-vs-code&quot;&gt;Upgrade VS Code&lt;/h3&gt; &lt;p&gt;To use this feature, ensure your VS Code is updated. Use the following commands to upgrade on Ubuntu:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://packages.microsoft.com/repos/vscode stable main&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;code &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;configure-settings&quot;&gt;Configure Settings&lt;/h3&gt; &lt;p&gt;Add the following configuration to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/settings.json&lt;/code&gt; file to enable this feature and customize file destinations:&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Enable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;pasting&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;links.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;markdown.editor.filePaste.copyIntoWorkspace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mediaFiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Define&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;folders&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;pasted&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;files.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;markdown.copyFiles.destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../assets/img/${documentBaseName}/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now, when you paste an image into a Markdown file, it will automatically save to the specified directory and generate the corresponding Markdown link.&lt;/p&gt; </description> <pubDate>Fri, 22 Nov 2024 13:14:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2024/enabling-copy-paste-image-markdown/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2024/enabling-copy-paste-image-markdown/</guid> <category>markdown</category> <category>vs-code</category> <category>tricks</category> </item> <item> <title>C++ testing with GTest</title> <description>&lt;hr /&gt; &lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt; &lt;p&gt;Unit testing is an essential practice in software development that helps ensure the correctness and reliability of individual units or components of code. In C++, one popular unit testing framework is Google Test, also known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GTest&lt;/code&gt;. In this blog post, we will explore how to set up and use GTest for writing unit tests in C++.&lt;/p&gt; &lt;h3 id=&quot;why-use-gtest&quot;&gt;Why use GTest?&lt;/h3&gt; &lt;p&gt;GTest offers several advantages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Comprehensive Assertions&lt;/strong&gt;: wide range of &lt;em&gt;assertion macros&lt;/em&gt;, easily test various conditions, such as equality, inequality, exception throwing, and more.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Fixture Support&lt;/strong&gt;: &lt;em&gt;test fixtures&lt;/em&gt;, avoid redundant code and ensures a clean testing environment.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Parameterized Tests&lt;/strong&gt;: &lt;em&gt;parameterized tests&lt;/em&gt;, run the same test logic with different input values.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Test Discovery&lt;/strong&gt;: automatically discovers and runs all tests without manual registration.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;getting-started-with-gtest&quot;&gt;Getting started with GTest&lt;/h3&gt; &lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt; &lt;p&gt;Install GTest:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Download gtest into /usr/src/gtest&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libgtest-dev &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cmake &lt;span class=&quot;c&quot;&gt;# Build gtest&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/src/gtest &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cmake CMakeLists.txt &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;c&quot;&gt;# Make the lib file accessible from a standard library search path&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/src/gtest/lib/libgtest.a /usr/lib/libgtest.a &lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/src/gtest/lib/libgtest_main.a /usr/lib/libgtest_main.a &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;simple-gtest-example&quot;&gt;Simple GTest example&lt;/h4&gt; &lt;p&gt;Let’s begin by examining the project structure required to integrate GTest into a C++ project. Here’s an example project structure:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# ├── build/&lt;/span&gt; ├── CMakeLists.txt ├── include/ │ └── mymath/ │ ├── module1.h │ └── module2.h &lt;span class=&quot;c&quot;&gt;# ├── results/&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# │ ├── bin/&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# │ └── lib/&lt;/span&gt; ├── src/ │ ├── CMakeLists.txt │ ├── main.cpp │ └── mymath/ │ ├── module1.cpp │ └── module1.cpp └── tests/ &lt;span class=&quot;c&quot;&gt;# THIS IS WHERE WE WRITE OUR TESTS&lt;/span&gt; │ ├── CMakeLists.txt │ └── main.cpp └── thirty_party/ &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// include/mymath/module1.h&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifndef MODULE1_H #define MODULE1_H &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arithmetic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/mymath/module1.cpp&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;module1.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arithmetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arithmetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// TRY DOING STH WRONG HERE //&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// include/mymath/module2.h&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifndef MODULE2_H #define MODULE2_H &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Function to calculate the factorial&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/mymath/module2.cpp&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;module2.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;setting-up-gtest-with-cmake&quot;&gt;Setting up GTest with CMake&lt;/h4&gt; &lt;p&gt;Before we dive into writing unit tests, we need to set up GTest with our C++ project using CMake. Below is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/CMakeLists.txt&lt;/code&gt; files that configures the GTest framework and builds our test executable.&lt;/p&gt; &lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# CMakeLists.txt&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;VERSION 3.5&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Set flag C++ 11&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_CXX_STANDARD 11&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Set outputs into a specific dir, e.g. &apos;bin&apos;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;/results/bin&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;add_subdirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;add_subdirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;tests&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# THIS IS WHERE WE BUILD OUR TESTS&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# tests/CMakeLists.txt&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Import GTest&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;find_package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;GTest REQUIRED&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;GTest_FOUND&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;STATUS &lt;span class=&quot;s2&quot;&gt;&quot;GTest found: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTest_VERSION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;FATAL_ERROR &lt;span class=&quot;s2&quot;&gt;&quot;GTest not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;GTEST_LIBRARY&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;STATUS &lt;span class=&quot;s2&quot;&gt;&quot;GTEST_LIBRARY:&quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTEST_LIBRARY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;STATUS &lt;span class=&quot;s2&quot;&gt;&quot;GTEST_MAIN_LIBRARY: &quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTEST_MAIN_LIBRARY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;GTEST_LIBRARY &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libgtest.a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;GTEST_MAIN_LIBRARY &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libgtest_main.a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Collect .cpp test cases in tests and .cpp definition in srxc/mymath/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;GLOB_RECURSE SOURCES &lt;span class=&quot;s2&quot;&gt;&quot;./*.cpp&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../src/mymath/*.cpp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;STATUS &lt;span class=&quot;s2&quot;&gt;&quot;SOURCES in tests is:&quot;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SOURCES&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add the executable &quot;project_test&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;project_test &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SOURCES&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# include definition codes&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The target_link_libraries directive needs to be part of the same CMakeLists.txt as the add_executable directive.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;project_test &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTEST_LIBRARY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTEST_MAIN_LIBRARY&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; pthread&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# given header files&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;target_include_directories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;project_test &lt;span class=&quot;c1&quot;&gt;# target project_test from add_subdirectory(tests)&lt;/span&gt; PRIVATE &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;/include/mymath &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;writing-unit-tests&quot;&gt;Writing unit tests&lt;/h4&gt; &lt;p&gt;In order to create unit tests using GTest, we create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/main.cpp&lt;/code&gt; file. This process involves explicitly registering &lt;em&gt;test cases&lt;/em&gt; and &lt;em&gt;test suites&lt;/em&gt;, typically achieved through the use of macros. In GTest, a test suite (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TestSuite&lt;/code&gt;) is a collection of related test cases (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TestCase&lt;/code&gt;), while a test case is an individual test scenario or unit of testing within a test suite. Below is an illustration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/main.cpp&lt;/code&gt; file as an example:&lt;/p&gt; &lt;h5 id=&quot;test-fixture&quot;&gt;Test Fixture&lt;/h5&gt; &lt;p&gt;We start by creating a test fixture, which allows us to set up common objects and data used by multiple test cases. In this example, we’ll create a fixture for the Arithmetic class.&lt;/p&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// tests/main.cpp&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;gtest/gtest.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;module1.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;module2.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Define a test fixture for the Arithmetic class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArithmeticTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;protected:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Create an instance of the Arithmetic class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arithmetic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h5 id=&quot;test-cases&quot;&gt;Test Cases&lt;/h5&gt; &lt;p&gt;Next, we write test cases within the test fixture to verify the functionality of the Arithmetic class methods.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;TEST_F macro&lt;/em&gt; is used to define a test case within a test fixture.&lt;/li&gt; &lt;li&gt;&lt;em&gt;TEST macro&lt;/em&gt; is used to define a standalone test case without a test fixture.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Test case for the add method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEST_F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Test case for the multiply method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEST_F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MultiplyTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Standalone test case for the factorial function from module2.h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module2TestSuite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FactorialTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;building-and-running-tests&quot;&gt;Building and running tests&lt;/h4&gt; &lt;p&gt;After writing the test cases, we build and run the tests as follows:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build cmake .. make &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./results/bin/project_test &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/img/gtest_output1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;To address this, we make modifications to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/module1.cpp&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/mymath/module1.cpp&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;module1.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arithmetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arithmetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// FIX IS HERE //&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Build and run the tests again:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./results/bin/project_test &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/img/gtest_output2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;All tests pass, it indicates that the functionality of the Arithmetic class and the factorial function (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module2.h&lt;/code&gt;) are working correctly.&lt;/p&gt; &lt;h3 id=&quot;writing-effective-tests-with-gtest&quot;&gt;Writing effective tests with GTest&lt;/h3&gt; &lt;p&gt;To write effective tests using GTest, consider the following best practices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Test Naming&lt;/strong&gt;: use descriptive and meaningful names for your test functions to clearly indicate the purpose of each test.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Test Independence&lt;/strong&gt;: ensure that each test is independent and does not rely on the state or outcome of other tests.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Fixture Usage&lt;/strong&gt;: use fixtures to set up common resources or test contexts, and tear them down after the test is complete.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Assertions&lt;/strong&gt;: use appropriate assertion macros for different test conditions to ensure your tests cover various scenarios.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Check out &lt;a href=&quot;https://github.com/google/googletest/blob/main/docs/advanced.md&quot;&gt;Advanced GoogleTest Topics&lt;/a&gt; or &lt;a href=&quot;http://google.github.io/googletest/reference/testing.html&quot;&gt;GTest Testing Reference&lt;/a&gt; to see more about advanced Features of GTest such as &lt;em&gt;typed tests&lt;/em&gt;, &lt;a href=&quot;https://github.com/google/googletest/blob/main/docs/advanced.md#death-tests&quot;&gt;&lt;em&gt;death tests&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;test event listeners&lt;/em&gt;, etc.&lt;/p&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;Unit testing is crucial for ensuring the quality and correctness of software projects. Google Test (GTest) provides a powerful framework for writing unit tests in C++. In this blog post, we explored the setup process of GTest in a C++ project and wrote a simple unit test to verify the functionality of a basic function. By adopting unit testing practices with GTest, developers can increase code coverage and build more robust and reliable software.&lt;/p&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;GoogleTest User’s Guide: &lt;a href=&quot;http://google.github.io/googletest/&quot;&gt;google.github.io/googletest&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- https://cppdeveloper.com/tutorial/unit-test-voi-google-test-gtest-tren-linux/ --&gt; &lt;!-- ### Errors [libIlmImf-2_2.so.22 not found](https://stackoverflow.com/questions/64738243/problem-with-imagemagick-after-upgrading-ubuntu-to-20-04) ```bash cd /usr/lib/x86_64-linux-gnu sudo ln -s libIlmImf-2_3.so.24 libIlmImf-2_2.so.22 ``` --&gt; </description> <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2023/c-testing-with-gtest/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2023/c-testing-with-gtest/</guid> <category>testing</category> <category>c++</category> </item> <item> <title>Tmux: an introduction to terminal multiplexing</title> <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt; &lt;p&gt;Tmux (Terminal Multiplexer) is a powerful tool that allows you to split a single terminal window into multiple panes, run multiple sessions within a single terminal, and detach and reattach to sessions later across different terminals or even a different computer. This can be extremely useful if you need to work remotely or switch between different devices or simply protect your process because &lt;strong&gt;the process will not be terminated when the terminal is closed or the connection is lost&lt;/strong&gt;.&lt;/p&gt; &lt;h3 id=&quot;key-features&quot;&gt;Key features&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/img/tmux.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;Here’s a brief overview of some of the key features of tmux:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Sessions&lt;/strong&gt;: a Tmux session is a collection of one or more windows, each containing one or more panes. You can create, rename, and switch between sessions using various Tmux commands.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: a tmux window is a full-screen pane that can be split into multiple panes. You can create, rename, and switch between windows within a session.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Panes&lt;/strong&gt;: a tmux pane is a sub-division of a window that allows you to view and interact with multiple terminals at once. You can split and resize panes vertically and horizontally, and switch between them using various tmux commands.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Detaching and reattaching&lt;/strong&gt;: one of the most powerful features of tmux is its ability to detach and reattach to sessions. This means that you can start a long-running process (such as a server or a script) in a tmux session, detach from the session, and then reattach to it later from a different terminal or even a different computer.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt;: tmux is highly customizable, with a wide range of configuration options and key bindings that can be modified to suit your needs.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;basic-commands&quot;&gt;Basic commands&lt;/h3&gt; &lt;p&gt;Here are some basic commands to get started with tmux.&lt;/p&gt; &lt;h4 id=&quot;install-and-launch-first-tmux-session&quot;&gt;Install and launch first tmux session&lt;/h4&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# install tmux:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tmux &lt;span class=&quot;c&quot;&gt;# launch tmux:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;In tmux we have &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix = Ctrl + b (default)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4 id=&quot;session&quot;&gt;Session&lt;/h4&gt; &lt;p&gt;In tmux we can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create/ Kill a session &lt;ul&gt; &lt;li&gt;Create: &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux new &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &amp;lt;session-name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt;Kill &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux kill-session &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;session-name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Rename a session: &lt;ul&gt; &lt;li&gt;Attach to the session, then rename it by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;new-session-name&amp;gt;&lt;/code&gt;, or &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux rename-session &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;old-session-name&amp;gt; &amp;lt;new-session-name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Attach to a session: &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux attach &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;name-session&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt;List all session:window: &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 0: 2 windows (created Tue Apr 25 08:52:02 2023) [80x23] (attached)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1: 1 windows (created Tue Apr 25 08:57:50 2023) [80x23] (attached)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;window&quot;&gt;Window&lt;/h4&gt; &lt;p&gt;Inside a session we can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create/ Kill a window: &lt;ul&gt; &lt;li&gt;Create: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Kill: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;, or: &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux kill-window &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;window-number&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Switch windows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;window-number&amp;gt;&lt;/code&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;window-number&amp;gt;: &amp;lt;window-name&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2] 0:bash&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 1:bash 2:bash- &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt;Rename a window: switch to the window &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;window-number&amp;gt;&lt;/code&gt;, then rename it by &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;new-window-name&amp;gt;&lt;/code&gt;, or &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux rename-window &amp;lt;new-window-name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Exit a window: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Detach: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;pane&quot;&gt;Pane&lt;/h4&gt; &lt;p&gt;Inside a window we can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a new pane: &lt;ul&gt; &lt;li&gt;horizontally: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;&lt;/li&gt; &lt;li&gt;vertically: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Kill a pane: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Switch panes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Move a pane: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + o&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;https://github.com/tmux/tmux/wiki&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://arcolinux.com/everthing-you-need-to-know-about-tmux-panes/&quot;&gt;https://arcolinux.com/everthing-you-need-to-know-about-tmux-panes/&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; </description> <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2023/tmux/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2023/tmux/</guid> <category>tmux</category> </item> <item> <title>Basic vim usage</title> <description>&lt;hr /&gt; &lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt; &lt;p&gt;As a developer, text editor is an important tool for me. In this blog post, we’ll explore the world of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vim&lt;/code&gt; and discover how it can revolutionize your programming workflow. &lt;img src=&quot;../../../assets/img/vim.png&quot; alt=&quot;&quot; /&gt; So, let’s start with reason it has gained a loyal following among developers:&lt;/p&gt; &lt;h3 id=&quot;why-vim&quot;&gt;Why Vim?&lt;/h3&gt; &lt;p&gt;Vim offers several advantages as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Speed &amp;amp; Efficiency&lt;/strong&gt;: maximize keyboard shortcuts and eliminate mouse usage.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt;: tailor the editor to your specific needs and preferences such as keyboard mappings.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Extensibility&lt;/strong&gt;: provide a vibrant plugin ecosystem, support various programming languages, code linting, autocompletion, and more.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;getting-started-with-vim&quot;&gt;Getting started with Vim&lt;/h3&gt; &lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt; &lt;p&gt;To begin your Vim journey, let’s set up the editor and install some handy plugins.&lt;/p&gt; &lt;p&gt;Install Vim:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Install plugin manager, &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;VundleVim/Vundle.vim&lt;/a&gt;:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Customize your Vim configuration by adding or updating plugins in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vim/vimrc&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Download plugins (added in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vim/vimrc&lt;/code&gt;) by launching vim, running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:source ~/.vim/vimrc&lt;/code&gt;. Alternatively, you can do both things from the command line using:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim +PluginInstall +qall &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;u&gt;As an example, you can check out&lt;/u&gt; &lt;a href=&quot;https://maiminh1996.github.io/assets/scripts/vimrc.txt&quot;&gt;MY-VIMRC&lt;/a&gt;:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt purge vim &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim wget &lt;span class=&quot;nt&quot;&gt;--no-check-certificate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--content-disposition&lt;/span&gt; https://maiminh1996.github.io/assets/scripts/vimrc.txt &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; ~/.vim/vimrc vim +PluginInstall +qall &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;three-modes-of-vim&quot;&gt;Three modes of Vim&lt;/h4&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vim&lt;/code&gt; operates in three modes, each serving a specific purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Inserting and editing text: &lt;strong&gt;INSERT&lt;/strong&gt;. Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; to enter this mode.&lt;/li&gt; &lt;li&gt;Selecting and manipulating text: &lt;ul&gt; &lt;li&gt;&lt;strong&gt;VISUAL&lt;/strong&gt; mode. Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; to select text character by character.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;V-LINE&lt;/strong&gt; (VISUAL LINE) mode. Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; to select text line by line.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;V-BLOCK&lt;/strong&gt; (VISUAL BLOCK) mode. Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-v&lt;/code&gt; to select text in a block format.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Navigating and executing commands: &lt;strong&gt;NORMAL&lt;/strong&gt; (COMMAND) mode. Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESC&lt;/code&gt; to enter this mode.&lt;/li&gt; &lt;/ul&gt; &lt;!-- #### Navigation in a file In Vim, you can navigate through a file using the arrow keys &amp;larr; &amp;uarr; &amp;darr; &amp;rarr; or the &quot;H, K, J and L&quot; buttons. To go to a specific line number (for example, line 15), type `:15`. --&gt; &lt;h4 id=&quot;tree-explorer&quot;&gt;Tree explorer&lt;/h4&gt; &lt;p&gt;The common file system explorer plugin, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:NERDTree&lt;/code&gt;, facilitates navigation within your projects. Here are some key commands to remember:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Open the selected file in a new tab: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Open the selected file in a horizontal split window: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;.&lt;/li&gt; &lt;li&gt; &lt;p&gt;Toggle NERD Tree’s quick help: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Move the cursor to the parent directory: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;Change the tree root to the selected directory: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;.&lt;/li&gt; &lt;li&gt; &lt;p&gt;Move the tree root up a directory: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;Navigate between split windows by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-w&lt;/code&gt; and then use any navigation keys ← ↑ ↓ → like accordingly to go to left, above, below and right respectively.&lt;/li&gt; &lt;li&gt; &lt;p&gt;Switch between different tabs: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gt&lt;/code&gt; (next tab), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gT&lt;/code&gt; (previous tab), or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;numbered-tab&amp;gt; gt&lt;/code&gt; followed by the tab number.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;Refresh the folder (e.g.: after create/ delete files): Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;tabs&quot;&gt;Tabs&lt;/h4&gt; &lt;p&gt;For my convenience working with tabs in Vim, the tab shortcuts are mapped as follows in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vim/vimrc&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; ~/.vim/vimrc&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot; In NORMAL mode, Switch tab with Ctrl + Right Arrow&lt;/span&gt; nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Right&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tabnext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot; Switch tab with Ctrl + Left Arrow&lt;/span&gt; nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Left&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;tabprev&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot; Create new tab with Ctrl + Tab&lt;/span&gt; nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;T&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tabnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot; In INSERT mode, Switch tab with Ctrl + Right Arrow&lt;/span&gt; inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Right&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tabnext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot; Switch tab with Ctrl + Left Arrowe&lt;/span&gt; inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Left&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;tabprev&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&quot; Create new tab with Ctrl + Tab&lt;/span&gt; inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;T&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tabnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And then in both mode NORMAL and INSERT I can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Open a new tab: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-t&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Switch to the next tab: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL&lt;/code&gt; →.&lt;/li&gt; &lt;li&gt;Switch to the previous tab: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL&lt;/code&gt; ←.&lt;/li&gt; &lt;li&gt;Close a tab: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-q&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;files&quot;&gt;Files&lt;/h4&gt; &lt;p&gt;Efficient editing is one of Vim’s strengths. Here are some essential commands to enhance your editing workflow:&lt;/p&gt; &lt;p&gt;Insert text:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;At the current cursor position: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;After the current cursor position: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Select text:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Selects multiple lines (excluding the entire line): Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; to enter VISUAL mode.&lt;/li&gt; &lt;li&gt;Selects multiple lines (including the entire line): Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; to enter VISUAL LINE mode.&lt;/li&gt; &lt;li&gt;Selects text in a block format: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-v&lt;/code&gt; to enter BLOCK VISUAL mode, then use arrow keys for selection.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Copy, paste and cut:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Copy: &lt;ul&gt; &lt;li&gt;A line: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; or &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yy&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Selected text (in VISUAL mode (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-v&lt;/code&gt;)): Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Cut: &lt;ul&gt; &lt;li&gt;A line: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Selected text (in VISUAL mode (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-v&lt;/code&gt;)): Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Paste the text: &lt;ul&gt; &lt;li&gt;At the current cursor position: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;After the current cursor position: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;!-- To copy or delete multiple lines of text, move the cursor to the beginning of where you&apos;d like to copy or delete. Then, press `:` to bring up the command line at the bottom of the Vim window. To copy, type `y` followed by the number of lines you want to copy. For example, to copy four lines of text, type `y4`. To delete, type `d` followed by the number of lines you want to delete. For example, to delete four lines of text, type `d4`. --&gt; &lt;h4 id=&quot;undo-redo&quot;&gt;Undo/ Redo&lt;/h4&gt; &lt;p&gt;Mistakes happen, but with Vim, you can easily undo and redo changes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Undo changes: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:u&lt;/code&gt; or press &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Redo changes: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-r&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;search-replace&quot;&gt;Search/ Replace&lt;/h4&gt; &lt;p&gt;Vim provides powerful search and replace functionality to modify your text efficiently:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Replace text in all lines: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%s/&amp;lt;text2search&amp;gt;/&amp;lt;text2replace&amp;gt;/g&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Replace text in a specific line: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:s/&amp;lt;text2search&amp;gt;/&amp;lt;text2replace&amp;gt;/g&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Search for a specific word without replacing: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&amp;lt;text2search&amp;gt;&lt;/code&gt; or Press &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-f&lt;/code&gt;&lt;/strong&gt; (mapped in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vim/vimrc&lt;/code&gt;). &lt;ul&gt; &lt;li&gt;Search forward: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHIFT-*&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Search backward: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHIFT-#&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;save-changes&quot;&gt;Save changes&lt;/h4&gt; &lt;p&gt;Ensure your work is saved and manage file closures with these commands:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Save changes: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt; or type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w [save-file-name]&lt;/code&gt; to save new file.&lt;/li&gt; &lt;li&gt;Save changes and quit: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt; or press &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZZ&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Force quit without saving changes: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;comment-uncomment&quot;&gt;Comment/ Uncomment&lt;/h4&gt; &lt;p&gt;Comment a block of text in Vim:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Move the cursor to the first line you want to comment.&lt;/li&gt; &lt;li&gt;Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-v&lt;/code&gt; to enter VISUAL BLOCK mode and use arrow keys to select the lines.&lt;/li&gt; &lt;li&gt;Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; to switch to INSERT mode and enter the comment character (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; for a hash symbol).&lt;/li&gt; &lt;li&gt;Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESC&lt;/code&gt; (give it a second) to apply the comment character to all selected lines.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;By using plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tpope/vim-commentary&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;comment: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt;&lt;/li&gt; &lt;li&gt;uncomment: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gc&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;tips&quot;&gt;Tips&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Show diff before saving the file: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w !diff % -&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Open Vim with the cursor on a particular line: Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim &amp;lt;linenum&amp;gt; &amp;lt;path/to/file&amp;gt;&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Split file: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:split &amp;lt;file&amp;gt;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:vsplit &amp;lt;file&amp;gt;&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;By prefixing the command with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:!&amp;lt;cmd&amp;gt;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:term&lt;/code&gt;, Vim opens up a terminal window and runs the specified command.&lt;/li&gt; &lt;li&gt;Buffers: &lt;ul&gt; &lt;li&gt;Show list buffer files: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:buffers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:ls&lt;/code&gt; or install the plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bling/vim-bufferline&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Switch to a buffer: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&amp;lt;num-buffer&amp;gt;&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Delete a buffer: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bdelete &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;!-- ### Editing files remotely Vim also supports editing files remotely, which can be useful if you need to work on a file located on a remote server. This can be done via FTP or SSH, for example. To edit a remote file over FTP, use the following syntax: ```bash $ vim ftp://&lt;username&gt;@&lt;hostname&gt;/&lt;path_to_file&gt; ``` For example, to edit a file named test.txt located in the home directory of a user named jane on a server with IP address 192.168.1.100, you could use the following command: ```bash $ vim ftp://jane@192.168.1.100/home/jane/test.txt ``` You will be prompted for a password if necessary. --&gt; &lt;h3 id=&quot;customizing-vim&quot;&gt;Customizing Vim&lt;/h3&gt; &lt;p&gt;You can customize your Vim by modifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vim/vimrc&lt;/code&gt; to define mappings, set options, and specify plugin settings to tailor Vim to your liking.&lt;/p&gt; &lt;p&gt;Some installed plugins in &lt;a href=&quot;https://maiminh1996.github.io/assets/scripts/vimrc.txt&quot;&gt;MY-VIMRC&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Markdown preview: &lt;a href=&quot;https://github.com/iamcco/markdown-preview.nvim&quot;&gt;iamcco/markdown-preview.nvim&lt;/a&gt;. Type: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:MarkdownPreview&lt;/code&gt; to start the preview or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:MarkdownPreviewStop&lt;/code&gt; to stop the preview.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#tree-explorer&quot;&gt;Tree explorer&lt;/a&gt;: &lt;a href=&quot;https://github.com/preservim/nerdtree&quot;&gt;preservim/nerdtree&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Code-completion: &lt;a href=&quot;https://github.com/ervandew/supertab&quot;&gt;ervandew/supertab&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Color schemes: &lt;a href=&quot;https://github.com/tomasiser/vim-code-dark&quot;&gt;tomasiser/vim-code-dark&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Commenting: &lt;a href=&quot;https://github.com/tpope/vim-commentary&quot;&gt;tpope/vim-commentary&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;!-- Text formatting Completion in Insert mode Jump tags Automatic commands Viminfo Mouse support Graphical User Interface (GUI) Scripting language Plugins Syntax highlighting for many programming languages Extended regular expressions Integrated Spell checking Diff mode Encryption using the blowfish algorithm Extensive customizable Packages Edit-compile-edit speedup Indenting for many programming languages Searching for words in include files Advanced text objects Folding ctags and cscope integration Integration of several programming languages Asynchronous I/O support Timers --&gt; &lt;h3 id=&quot;integrating-vim-with-other-tools&quot;&gt;Integrating Vim with Other Tools&lt;/h3&gt; &lt;p&gt;Vim can seamlessly integrate with other tools in your programming ecosystem:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Version Control: Use Vim as your Git commit editor (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global core.editor &quot;vim&quot;&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Terminal Vim: Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:term&lt;/code&gt; to open terminal and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt; in terminal to exit.&lt;/li&gt; &lt;li&gt;IDE-like Features: Leverage plugins like YouCompleteMe or Ale to enable autocompletion, linting, and error checking, providing IDE-like features within Vim.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;In conclusion, Vim is a powerful text editor with many features and capabilities. It can take some time to learn, but with practice, it can greatly improve your productivity and efficiency as a developer or writer. By familiarizing yourself with Vim’s various modes, navigation and editing commands, search and replace functionality, undo/redo, saving files, syntax highlighting, and even remote file editing, you can make the most of this versatile tool.&lt;/p&gt; &lt;p&gt;Finally, if you want to manage &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vim plugins&lt;/a&gt;, you can use a plugin manager like Vundle. It simplifies the process of installing, updating, and removing plugins, and allows you to easily try out new plugins without cluttering up your Vim configuration.&lt;/p&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Vim: &lt;a href=&quot;https://www.vim.org/&quot;&gt;vim.org&lt;/a&gt;&lt;/li&gt; &lt;li&gt;VundleVim/Vundle.vim Plugin Manager: &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;github.com/VundleVim/Vundle.vim&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; </description> <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2023/vim/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2023/vim/</guid> <category>vim</category> <category>ide</category> </item> <item> <title>Python testing with pytest</title> <description>&lt;hr /&gt; &lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt; &lt;p&gt;Testing frameworks play an important role in software development, allowing developers to write automated tests that can quickly and reliably check whether their code is working as expected. In Python, two popular testing frameworks are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt;. While &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest&lt;/code&gt; is a solid testing framework that comes with the Python standard library, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; offers a more modern and flexible approach to testing (more concise and expressive, automatic test discovery, reused across multiple test cases, etc.) that can save time and effort in the long run.&lt;/p&gt; &lt;h3 id=&quot;why-pytest&quot;&gt;Why pytest?&lt;/h3&gt; &lt;p&gt;pytest offers several advantages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: concise syntax and easy to understand.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Rich Set of Features&lt;/strong&gt;: assertion methods, fixture management, test discovery, and test parameterization.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Integration and Extensibility&lt;/strong&gt;: support test coverage, plugins for test reporting, and compatibility with continuous integration systems.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;getting-started-with-pytest-via-an-example&quot;&gt;Getting started with pytest via an example&lt;/h3&gt; &lt;p&gt;To demonstrate how pytest works, let’s start by setting up a simple python project. We create a directory called mymath that contains Python modules called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module1.py&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module2.py&lt;/code&gt;, which defines several math functions, and a directory called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/&lt;/code&gt; that contains Python test modules called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_module1.py&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_module2.py&lt;/code&gt;.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ├── Dockerfile ├── docs/ ├── README.md ├── requirements.txt ├── src/ │   ├── main.py │   └── mymath/ │   ├── __init__.py │   ├── module1.py │   └── module2.py └── tests/ ├── __init__.py ├── test_module1.py └── test_module2.py &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# src/mymath/__init__.py &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# src/mymath/module1.py &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arithmetic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subtract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;division&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# src/mymath/module2.py &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# raise ValueError(&quot;value must be &amp;lt;= 0&quot;) &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# TRY DOING STH WRONG HERE # &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# tests/__init__.py &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# tests/test_module1.py &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mymath.module1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arithmetic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arithmetic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# tests/test_module2.py &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mymath.module2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_factorial_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;factorial_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;factorial_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;factorial_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;factorial_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exc_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;value must be &amp;lt;= 0&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Check &lt;a href=&quot;https://docs.pytest.org/en/7.3.x/how-to/assert.html&quot;&gt;PyTest how to write and report assertions in tests&lt;/a&gt; or &lt;a href=&quot;https://docs.pytest.org/en/7.1.x/reference/reference.html&quot;&gt;PyTest API reference&lt;/a&gt; (such as approx, fail, skip, raises, warns, etc.) to know how to write test cases.&lt;/p&gt; &lt;h5 id=&quot;pytest-in-command-line&quot;&gt;pytest in command line&lt;/h5&gt; &lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; pytest &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Run the tests using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt;, we simply need to execute the following command from the command line:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pytest &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; will automatically search for all the &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_*&lt;/code&gt;&lt;/em&gt; functions that are defined in any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_test.py&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_*.py&lt;/code&gt; files in the current root directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./&lt;/code&gt;, and run them as test cases. In this case, it will find &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_module*1.py&lt;/code&gt;&lt;/em&gt; and execute the &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_add()&lt;/code&gt;&lt;/em&gt; function, which checks that the add function from &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module1.py&lt;/code&gt;&lt;/em&gt; works correctly and so on for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module2.py&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/img/pytest_output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;Pytest shows that we have 2 passed and 1 failed which comes from the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factorial_int()&lt;/code&gt; taking the -1 as input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/test_module2.py&lt;/code&gt;. We fix this by modifing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/test_module2.py&lt;/code&gt; Pytest reports 2 passing tests and 1 failing test originating from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factorial_int()&lt;/code&gt; function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/test_module2.py&lt;/code&gt;, where the input -1 resulted in the failure. To address this, we make modifications to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/module2.py&lt;/code&gt;.&lt;/p&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# src/module2.py &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;value must be &amp;lt;= 0&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# FIX IS HERE &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# return 0 &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Then rerun &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; and it will report 3 passing test and show: &lt;img src=&quot;../../../assets/img/pytest_output2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;Note that if a test case fails or raises an exception, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; might stop executing further test cases. Fixing the failures or errors might allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; to proceed with running the remaining test cases.&lt;/p&gt; &lt;h5 id=&quot;pytest-in-vs-code&quot;&gt;pytest in VS Code&lt;/h5&gt; &lt;p&gt;Alternatively, we can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt;inside VS Code as follow (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ms-python.python&lt;/code&gt; extension + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; package):&lt;/p&gt; &lt;p&gt;In &lt;kbd&gt;Testing&lt;/kbd&gt; (&lt;kbd&gt;Activiry Bar&lt;/kbd&gt;): &lt;kbd&gt;Configure Python Tests&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;pytest&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;. Root directory&lt;/kbd&gt;, all functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_&lt;/code&gt; under root directory will be appear in Testing and we then can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Run test&lt;/li&gt; &lt;li&gt;Show output (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+; Ctrl+O&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;Set break point to debug on failure cases.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/img/pytest_vscode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;writing-effective-test-cases&quot;&gt;Writing effective test cases&lt;/h3&gt; &lt;p&gt;To write effective test cases with pytest, consider the following best practices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Test Naming: Use descriptive and meaningful names for your test functions to clearly convey their purpose and expected behavior.&lt;/li&gt; &lt;li&gt;Assertion Methods: assertion methods, such as assert, assertEqual, assertRaises.&lt;/li&gt; &lt;li&gt;Test Organization: test cases into logical groups, pytest markers and tags.&lt;/li&gt; &lt;li&gt;Fixtures: pytest fixtures.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Check out some advanced pytest features such as &lt;a href=&quot;https://docs.pytest.org/en/7.3.x/how-to/parametrize.html&quot;&gt;parametrized tests&lt;/a&gt;, &lt;a href=&quot;https://docs.pytest.org/en/7.1.x/example/pythoncollection.html&quot;&gt;test discovery&lt;/a&gt;, mocking and patching.&lt;/p&gt; &lt;p&gt;In addition, pytest can integrate with other tools and frameworks such as CI, test coverage, test reporting.&lt;/p&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;In summary, pytest offers a more modern and flexible approach to testing in Python, making it easier and faster to write and run automated tests. By following this simple example, you can start using pytest in your own projects and see the benefits for yourself.&lt;/p&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;PyTest docs &lt;a href=&quot;https://docs.pytest.org&quot;&gt;docs.pytest.org&lt;/a&gt;&lt;/li&gt; &lt;li&gt;PyTest how to write and report assertions in tests &lt;a href=&quot;https://docs.pytest.org/en/7.3.x/how-to/assert.html&quot;&gt;docs.pytest.org/en/7.3.x/how-to/assert.html&lt;/a&gt;&lt;/li&gt; &lt;li&gt;PyTest API reference &lt;a href=&quot;https://docs.pytest.org/en/7.1.x/reference/reference.html&quot;&gt;docs.pytest.org/en/7.1.x/reference/reference.html&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;appendix&quot;&gt;Appendix&lt;/h3&gt; &lt;h4 id=&quot;error-keywords-in-python&quot;&gt;Error keywords in Python&lt;/h4&gt; &lt;p&gt;Some commonly used error keywords in Python:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZeroDivisionError&lt;/code&gt;: Raised when dividing a number by zero.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeError&lt;/code&gt;: Raised when an operation or function is applied to an object of an inappropriate type.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ValueError&lt;/code&gt;: Raised when a function receives an argument of the correct type but an invalid value.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IndexError&lt;/code&gt;: Raised when trying to access an index that is out of range.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeyError&lt;/code&gt;: Raised when trying to access a dictionary key that doesn’t exist.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileNotFoundError&lt;/code&gt;: Raised when a file or directory is not found.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AssertionError&lt;/code&gt;: Raised when an assert statement fails.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImportError&lt;/code&gt;: Raised when an imported module or attribute cannot be found.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AttributeError&lt;/code&gt;: Raised when an attribute reference or assignment fails.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RuntimeError&lt;/code&gt;: Raised when a generic runtime error occurs.&lt;/li&gt; &lt;/ul&gt; </description> <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2023/python-testing-with-pytest/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2023/python-testing-with-pytest/</guid> <category>vs-code</category> <category>python</category> <category>testing</category> </item> <item> <title>Docker inside vs code</title> <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt; &lt;p&gt;Developers often use Docker to build, ship, and run applications in a consistent environment. And the integration of Docker with VSCode provides a streamlined development experience for them. In this article, we’ll show you how to use Docker within VS Code to build, run, and debug Python applications.&lt;/p&gt; &lt;!-- Contents - [Installing the necessary extensions](#installing-the-necessary-extensions) - [Building and running a Docker container](#building-and-running-a-docker-container) - [Debugging inside Docker container](#debugging-inside-docker-container) - [Conclusion](#conclusion) --&gt; &lt;h3 id=&quot;installing-the-necessary-extensions&quot;&gt;Installing the necessary extensions&lt;/h3&gt; &lt;p&gt;First, we need to install two VS Code extensions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;ms-vscode-remote.remote-containers&lt;/em&gt; (to have a full-featured VS Code environment inside a Docker container)&lt;/li&gt; &lt;li&gt;&lt;em&gt;ms-azuretools.vscode-docker&lt;/em&gt; (to manage Docker images and containers directly from the editor)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once you’ve installed these extensions, you should see a new Docker icon in the left-hand Activity Bar of VS Code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Containers&lt;/li&gt; &lt;li&gt;Images&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Task with Container:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+P&lt;/code&gt; → &lt;em&gt;&amp;gt; Dev Containers: …&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Or, &lt;em&gt;Open a Remote Windown&lt;/em&gt; (&lt;em&gt;Status Bar&lt;/em&gt;) →&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;building-and-running-a-docker-container&quot;&gt;Building and running a Docker container&lt;/h3&gt; &lt;p&gt;To build a Docker container for our Python project, we need to create a Dockerfile that specifies the container’s environment. In this example, we’ll create a simple Dockerfile that installs Python 3.9:&lt;/p&gt; &lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dockerfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ubuntu:20.04&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; python3.9 python3.9-dev &lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /home&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;In the same directory as our Dockerfile, we also have a Python file called test.py.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree ├── Dockerfile └── test.py &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;To build the Docker image, we can&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Right-click on the &lt;em&gt;Dockerfile&lt;/em&gt; → &lt;em&gt;Build Image&lt;/em&gt; → Set image tag name (e.g. testdocker:39)&lt;/li&gt; &lt;li&gt;Or, we can run the following command in the terminal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build -t testdocker:39&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once we’ve built the image, we can run a container using the following command:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Or, Run container by right click on the built image (e.g. testdocker:39) (&lt;em&gt;IMAGES &amp;lt; Docker &amp;lt; Activity Bar&lt;/em&gt;) → &lt;em&gt;Run Interactive&lt;/em&gt; → Right click on the running container (e.g. testdocker:39) (&lt;em&gt;CONTAINERS &amp;lt; Docker &amp;lt; Activity Bar&lt;/em&gt;) → &lt;em&gt;Attach Visual Studio Code&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Or, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+P&lt;/code&gt; → &lt;em&gt;&amp;gt; Dev Containers: Reopen in container&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Or, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run -it testdocker:39&lt;/code&gt; → Right click on the running container (e.g. testdocker:39) (&lt;em&gt;CONTAINERS &amp;lt; Docker &amp;lt; Activity Bar&lt;/em&gt;) → &lt;em&gt;Attach Visual Studio Code&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;debugging-inside-docker-container&quot;&gt;Debugging inside Docker container&lt;/h3&gt; &lt;p&gt;Once we’re inside the container, we can open the project folder in VS Code by using the &lt;em&gt;Open Folder&lt;/em&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+O&lt;/code&gt;). Then, we can install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ms-python.python&lt;/code&gt; (→ &lt;em&gt;Install in Dev Container: Existing Dockerfile&lt;/em&gt;) extension for Python and set up a launch configuration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; for debugging.&lt;/p&gt; &lt;p&gt;Here’s an example launch configuration for a Python file called test.py:&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.vscode/launch.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Python project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pythonPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/python3.9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integratedTerminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;With the launch configuration set up, we can use VS Code’s debugging tools to step through our Python code and troubleshoot any issues.&lt;/p&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;By using Docker with VS Code, we can build, run, and debug Python applications in a consistent environment that’s isolated from our host machine. This approach can save time and effort, and it helps ensure that our applications will run correctly in any environment.&lt;/p&gt; </description> <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2023/docker-inside-vs-code/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2023/docker-inside-vs-code/</guid> <category>docker</category> <category>vs-code</category> </item> <item> <title>Expert advice for successful research</title> <description>&lt;!-- &lt;b&gt;Last modified: &lt;script&gt;document.write( document.lastModified );&lt;/script&gt; --&gt; &lt;p&gt;Research is a vital part of any field, and as a researcher, it’s crucial to continually improve your skills and knowledge. Thankfully, some of the top experts in the field have shared their advice on how to write a good research paper, avoid “clique” culture, and thrive in the research community. Here are some of their insights:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Bill Freeman: &lt;a href=&quot;../../../assets/img/freeman_how_to_write_papers.pdf&quot;&gt;How to Write a Good Research Paper&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Katsushi Ikeuchi: &lt;a href=&quot;../../../assets/img/ikeuchi_rights_obligations.pdf&quot;&gt;Rights and Obligations&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Timnit Gebru: &lt;a href=&quot;../../../assets/img/gebru_avoiding_a_clique_culture.pdf&quot;&gt;How to Avoid “Clique” Culture&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Sven Dickinson: &lt;a href=&quot;../../../assets/img/dickinson_strengthening_our_community.pdf&quot;&gt;Strengthening our Community through Mentorship, Leadership, and Inclusiveness&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Kristen Grauman: &lt;a href=&quot;../../../assets/img/grauman_preparing_clear_talks.pdf&quot;&gt;Tips for Preparing a Clear Talk&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Vladlen Koltun: &lt;a href=&quot;../../../assets/img/koltun_doing_(good)_research.pdf&quot;&gt;Doing (Good) Research&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Adriana Kovashka: &lt;a href=&quot;../../../assets/img/kovashka_research_in_context.pdf&quot;&gt;Research in Context&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Jitendra Malik: &lt;a href=&quot;../../../assets/img/malik_write_good_paper.pdf&quot;&gt;How to Write a Good Paper&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Cordelia Schmid: &lt;a href=&quot;../../../assets/img/schmid_good_research_and_evaluation.pdf&quot;&gt;How to Do Good Research &amp;amp; Evaluation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Derek Hoiem: &lt;a href=&quot;../../../assets/img/hoiem_thriving_in_research_community.pdf&quot;&gt;Principles to Thrive in the Research Community&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Devi Parikh: &lt;a href=&quot;../../../assets/img/parikh_time_management.pdf&quot;&gt;Calendar. Not to-do lists&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Georgia Gkioxari: &lt;a href=&quot;../../../assets/img/gkioxari_being_open.pdf&quot;&gt;Being Open&lt;/a&gt;&lt;/li&gt; &lt;li&gt;David Forsyth: &lt;a href=&quot;../../../assets/img/forsyth_what_pcs_told_acs_at_cvpr18.pdf&quot;&gt;What PCs told ACs for CVPR 18&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://faculty.cc.gatech.edu/~parikh/citizenofcvpr/&quot;&gt;https://faculty.cc.gatech.edu/~parikh/citizenofcvpr/&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; </description> <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2022/research/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2022/research/</guid> </item> <item> <title>Good advice and tips</title> <description>&lt;!-- &lt;b&gt;Last modified: &lt;script&gt;document.write( document.lastModified );&lt;/script&gt; --&gt; &lt;h2 id=&quot;scientific-paper&quot;&gt;Scientific paper&lt;/h2&gt; &lt;p&gt;Credit to &lt;a href=&quot;https://twitter.com/Michael_J_Black/status/1598957619301187584&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Michael_J_Black&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;In the LLM-science discussion, I see a common misconception that science is a thing you do and that writing about it is separate and can be automated. I’ve written over 300 scientific papers and can assure you that science writing can’t be separated from science doing. Why? 1/18&lt;/li&gt; &lt;li&gt;Anyone who has taught knows the following is true. You think you understand something until you go to teach it. Explaining something to others reveals gaps in your understanding that you didn’t know you had. Well, writing a scientific paper is a form of teaching. 2/18&lt;/li&gt; &lt;li&gt;Your paper is teaching your reader about your hypothesis, problem, method, the prior work in the field, your results, and what it all means for future work. When you write up your work and find it challenging, this is typically because you don’t yet fully understand it. 3/18&lt;/li&gt; &lt;li&gt;The writing reveals what you don’t know. Years ago, Michal Irani gave me good advice. She said you can write the introduction to your paper long before the science is done and that this helps structure your thinking. 4/18&lt;/li&gt; &lt;li&gt;Of course, you have to rewrite it once you know the outcome of your work but she’s right. You can tell the story before the ending is known. I am constantly training my students how to structure a story because doing so leads to good science. 5/18&lt;/li&gt; &lt;li&gt;What’s the problem in the world? Why isn’t it solved? What’s your key insight that lets you solve it when others couldn’t? Why is it novel? What’s your solution? Who’s your audience? What do they care about? What do they know? 6/18&lt;/li&gt; &lt;li&gt;None of these questions are about grammar. None are about English proficiency. They’re about “thinking proficiency”. They’re about understanding your contribution and why it’s important. They help structure an argument that’s logical. 7/18&lt;/li&gt; &lt;li&gt;Use Grammarly, please. It’s not cheating unless you’re taking a grammar test. By trying to write your story, you find the holes in your story. If you do this early, you have time to go back and let this drive your science. 8/18&lt;/li&gt; &lt;li&gt;Because people often have trouble getting started writing, I tell them to make a talk instead. The idea of telling a story to a room full of people makes it easier to get the structure right. If you have a really great talk, turning it into a great paper is relatively easy. 9/18&lt;/li&gt; &lt;li&gt;I have my students write a “shitty first draft”. All I care about is structure, logic, and story. We often sketch the figures and plots that we imagine on a whiteboard, take a photo, and put them in the paper. We build the whole structure before the work is done. 10/18&lt;/li&gt; &lt;li&gt;I guarantee that this leads to better science and better papers than rushing to write up something after you finish all the experiments. The early writing process leads to you realizing that you are missing experiments. 11/18&lt;/li&gt; &lt;li&gt;Most students would love for me to write their paper for them. They know I can do it faster. They also know that I’ll rewrite a lot of what they’ve written. So why should they do it? Because, it will help them become good scientists. 12/18&lt;/li&gt; &lt;li&gt;A good scientist has to be a good communicator. We don’t do science as a private activity. Imagine I structured all the papers and wrote them all and the students just coded and ran experiments. Or imagine an LLM did this. 13/18&lt;/li&gt; &lt;li&gt;One of the hardest things I ask them to do is to come up with an “elevator pitch”. This requires distilling something huge and complex into a sentence. To do so, you really have to understand the core of your contribution. 14/18&lt;/li&gt; &lt;li&gt;What about related work? Nobody reads that right? That could be automated, right? I think it’s one of the most important parts of a paper for both the author and the field. 15/18&lt;/li&gt; &lt;li&gt;I am often grappling with a sprawling literature and my job is to organize it in some way that provides insight. This may let others see the field in a new light and can lead them to new discoveries. 16/18&lt;/li&gt; &lt;li&gt;I know that I’m fortunate. I’m a native English speaker, raised by literate parents, and the mechanics of writing come naturally. But I don’t care about grammar. I care about ideas, logic, and story. It’s your argument that matters. 17/18&lt;/li&gt; &lt;li&gt;Summary: science thinking, writing, and doing are inseparable. Focus on story. Write early. Write a shitty first draft. And do yourself a favor: write it yourself. I promise that writing about your science will improve your science. 18/18&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;project-meeting&quot;&gt;Project meeting&lt;/h2&gt; &lt;p&gt;Credit to &lt;a href=&quot;https://www3.cs.stonybrook.edu/~minhhoai/guideline/meeting.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prof. Minh Hoai&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Project meetings are when we discuss about our project. But I have multiple on-going projects, so it is very likely that I don’t remember much about our previous meeting. In fact, my memory is so short-lived that I would forget about what we discussed the day after the meeting. Don’t assume that I remember the goal, the roadmap, and the progress of the project. To get the most out of the meetings, you need to help me. You need to be organized and prepared. Here are some guidelines.&lt;/p&gt; &lt;p&gt;Keep a single document for all meetings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Each week, new content for each meeting must be added, and it should include: &lt;ul&gt; &lt;li&gt;your presentation during the meeting; notes of the discussion during the meetings;&lt;/li&gt; &lt;li&gt;a list of actionable items&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Use GoogleSlide or PPTX (stored on Google Drive) and give me and everyone in the project the permission to edit your document. You can also use GoogleDoc, but I strongly recommend slides.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Before the meeting:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Prepare several slides to help you present during the meeting&lt;/li&gt; &lt;li&gt;Use figures, tables, and graphs to show your idea, the architecture of your network, and the results.&lt;/li&gt; &lt;li&gt;Draw the process diagram for the steps that you did or how the components of your method connect with each other. Trust me, this will be much clearer than saying I did this, that, and then or saying the output of A is fed into B and then C.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During the meeting:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Start by reminding me about your project: &lt;ul&gt; &lt;li&gt;make sure I understand where we were and where we are heading to summarize the hypothesis and the main idea&lt;/li&gt; &lt;li&gt;Show the list of actionable items from the last meeting&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Present your slides: &lt;ul&gt; &lt;li&gt;Describe what you did and show the results&lt;/li&gt; &lt;li&gt;Don’t just merely show the numerical values such as accuracy. You must interpret and analyze the results&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Note down the key points of our discussion&lt;/li&gt; &lt;li&gt;Write down the list of actionable items&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After the meeting:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Add more details to the meeting notes, and complete the list of actionable items&lt;/li&gt; &lt;li&gt;Convince yourself that you should do the items in the list of actionable items. Don’t do them because I told you to do them. You must see the strong reasons why you should do them.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Templates:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1zNAMMDwdRNPi2zJP2p27ydKesgFMDFwf3-azNLabxQ4/edit?usp=sharing&quot;&gt;example_project_meeting&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1txUYAsJUUBKnzIMJeqvcDdMWaBfcUElEi80hlhagHuk/edit?usp=sharing&quot;&gt;example_detailed_project_meeting&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt; &lt;p&gt;Credit to &lt;a href=&quot;https://www3.cs.stonybrook.edu/~minhhoai/guideline/scientific_debug.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prof. Minh Hoai&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;During a project meeting, you should report what you have done and the results that you achieve since the last meeting. Don’t just show the boring numbers such as accuracy. You must interpret and analyze the results:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;It’s great when you have &lt;strong&gt;positive results&lt;/strong&gt; and your idea works. But, even in this case, you should temporarily set the excitment aside, doubt it, and &lt;strong&gt;try to find another way to validate your results&lt;/strong&gt;. How can you convince me that there was no silly mistakes, e.g., not having independent train and test data? For example, can you validate your quantitative results with qualitiative results?&lt;/li&gt; &lt;li&gt;If you &lt;strong&gt;get negative results&lt;/strong&gt;, i.e., you implemented an idea but it performed worse than the method you hoped to beat. In this case, can you &lt;strong&gt;analyze why&lt;/strong&gt;? &lt;strong&gt;Before you implemented an idea, you must have a strong reason for why it would outperform the competing method, and that reason should be based on some assumption. Can you see now why your assumption was wrong&lt;/strong&gt;?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In my experience, you will get negative results 80% of the time. Don’t be ashamed to report that “I made no progress this week”, as long as it was not due to the lack of effort to do the work and analyze why it fails.&lt;/p&gt; </description> <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2022/good-advice-and-tips/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2022/good-advice-and-tips/</guid> <category>Advice</category> </item> <item> <title>Docker</title> <description>&lt;!-- &lt;b&gt;Last modified: &lt;script&gt;document.write( document.lastModified );&lt;/script&gt; --&gt; &lt;h3 id=&quot;why-docker&quot;&gt;Why docker?&lt;/h3&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/img/container_VM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;Docker is a useful tool which allows us to run the code in a contained environment that is &lt;strong&gt;isolated&lt;/strong&gt; from the rest of the system. This can be particularly useful when working with deep learning frameworks, which can be difficult to install and configure. By using Docker, we can &lt;strong&gt;easily switch&lt;/strong&gt; between different versions of a deep learning framework, or between different libraries or packages, or between different OS version, without affecting the rest of the system. Additionally, Docker can be used to &lt;strong&gt;package&lt;/strong&gt; up ythe code and dependencies into a single container, which can be easily shared with others or deployed to a cloud environment. In short, Docker is a containerization solution that lets us &lt;strong&gt;“build, run and share applications with containers”&lt;/strong&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Multiple CUDA versions: &lt;a href=&quot;https://maiminh1996.github.io/distilled/cuda/installing-cuda.html#multi-cuda-version-on-the-one-machine&quot;&gt;virtualenv&lt;/a&gt; –&amp;gt; docker containers&lt;/li&gt; &lt;li&gt;Different OSs: launch a Docker container with Ubuntu 20.04 while the host machine is running Ubuntu 16.04 and vice versa.&lt;/li&gt; &lt;li&gt;Easily deploy the container to cloud providers (such as AWS, Google Cloud, Azure etc.).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/img/docker-overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;quick-example&quot;&gt;Quick example&lt;/h3&gt; &lt;h4 id=&quot;context&quot;&gt;Context&lt;/h4&gt; &lt;p&gt;We want to run &lt;a href=&quot;https://github.com/sshaoshuai/PointRCNN&quot;&gt;PointRCNN&lt;/a&gt; by using docker. By default, the author proposes this requirement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Ubuntu 16.04 (gcc 5.4.0)&lt;/li&gt; &lt;li&gt;python 3.6+&lt;/li&gt; &lt;li&gt;pytorch 1.0&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As expected we will build a docker image like mine &lt;a href=&quot;https://hub.docker.com/r/mnaminh1996/pointrcnn&quot;&gt;mnaminh1996/pointrcnn&lt;/a&gt;. From there, we can launch the docker container to run &lt;a href=&quot;https://github.com/sshaoshuai/PointRCNN&quot;&gt;PointRCNN&lt;/a&gt; on. The steps that we need to do are as follows:&lt;/p&gt; &lt;p&gt;Host machine (my machine) description:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /etc/os-release&lt;/code&gt;: Ubuntu 18.04&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvcc -V&lt;/code&gt;: CUDA 11.0 (FYI: nvcc is CUDA compiler driver included in CUDA toolkit)&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd /usr/local/cuda/samples/1_Utilities/deviceQuery &amp;amp;&amp;amp; sudo make &amp;amp;&amp;amp; ./deviceQuery | grep Capability&lt;/code&gt;: GeForce RTX 2070 (capability 7.5 - Turing) –&amp;gt; supported by CUDA 10.2 (FYI: we refer the NVIDIA CUDA Toolkit documentation to determine which GPU architectures (compute capacity) are supported by a specific version of CUDA).&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu-drivers devices&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lscpu&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lshw&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsblk&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;build-docker-image&quot;&gt;Build docker image&lt;/h4&gt; &lt;blockquote&gt; &lt;p&gt;Build docker image on host machine&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;We set up for PointRCNN, dataset, etc following &lt;a href=&quot;https://github.com/sshaoshuai/PointRCNN.git&quot;&gt;https://github.com/sshaoshuai/PointRCNN.git&lt;/a&gt;.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/sshaoshuai/PointRCNN.git &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Download KITTI dataset and put it somewhere like this:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree data ├── KITTI │ ├── ImageSets │ ├── object │ │ ├──training │ │ ├──calib &amp;amp; velodyne &amp;amp; label_2 &amp;amp; image_2 &amp;amp; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;optional: planes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; │ │ ├──testing │ │ ├──calib &amp;amp; velodyne &amp;amp; image_2 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Download the &lt;a href=&quot;https://drive.google.com/file/d/1aapMXBkSn5c5hNTDdRNI74Ptxfny7PuC/view&quot;&gt;pretrained weight&lt;/a&gt; proposed by PointRCNN author.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;PointRCNN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tqdm fire scikit-image numba easydict numpy scipy scikit-learn PyYAML==5.1.2 h5py tensorboardX torch==1.0.1 setuptools protobuf&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; requirements.txt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;We then create a Dockerfile based on this docker image &lt;a href=&quot;https://registry.hub.docker.com/layers/nvidia/cuda/10.2-cudnn8-devel-ubuntu16.04/images/sha256-f32cdb7cfbd4fb047fe6580333ffd20204fdedc28742fa044885651d5af190f6?context=explore&quot;&gt;nvidia/cuda:10.2-cudnn8-devel-ubuntu16.04&lt;/a&gt;. But first we need to install Docker + NVIDIA Container Toolkit on the host machine, refer &lt;a href=&quot;#pre-requirement&quot;&gt;Pre-requirement&lt;/a&gt;.&lt;/p&gt; &lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; nvidia/cuda:10.2-cudnn8-devel-ubuntu16.04&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; TZ=Europe/Minsk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-snf&lt;/span&gt; /usr/share/zoneinfo/&lt;span class=&quot;nv&quot;&gt;$TZ&lt;/span&gt; /etc/localtime &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/timezone &lt;span class=&quot;c&quot;&gt;# Install basic dependencies&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; apt-utils &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; build-essential &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; cmake &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; git &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; wget &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libatlas-base-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libboost-all-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libgflags-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libgoogle-glog-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libhdf5-serial-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libleveldb-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; liblmdb-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libopencv-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libprotobuf-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libsnappy-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; protobuf-compiler &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; python3-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; python3-pip &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; python3-setuptools &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; python3-tk &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; python3-wheel &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libssl-dev libncurses5-dev libsqlite3-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libreadline-dev libtk8.6 libgdm-dev &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; libdb4o-cil-dev libpcap-dev &lt;span class=&quot;c&quot;&gt;# on ubuntu16.04, python3.5 is default&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# RUN apt-get update &amp;amp;&amp;amp; \&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# apt-get install -y software-properties-common &amp;amp;&amp;amp; \&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# add-apt-repository ppa:deadsnakes/ppa&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python3.6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; build-essential &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; wget https://www.python.org/ftp/python/3.6.10/Python-3.6.10.tgz &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf Python-3.6.10.tgz &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Python-3.6.10 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; ./configure &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /usr/bin/python &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/bin/python3 /usr/bin/python &lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Install Python dependencies&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; requirements.txt .&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--reinstall&lt;/span&gt; ca-certificates &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip setuptools wheel &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-cache-dir&lt;/span&gt; opencv-python &lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Build docker image:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;name-build-image:name-tag&amp;gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Check if docker image built successfully:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images &lt;span class=&quot;c&quot;&gt;# REPOSITORY TAG IMAGE ID CREATED SIZE&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# pointrcnn latest dde823c6de1d 23 hthes ago 8.21GB&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Run a container on host machine with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--gpus all&lt;/code&gt; to enable gpus into container. We can blind-mount datas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v /path-to-data-in-host/:/path-to-data-in-container/&lt;/code&gt; to use in container:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Run a docker container in interactive mode based on the docker image above&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# and blind-mount code, dataset, weight, etc&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--gpus&lt;/span&gt; all &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home/maiminh/PointRCNN/:/home/PointRCNN/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home/maiminh/KITTI_data/:/home/PointRCNN/data/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home/maiminh/PointRCNN.pth:/home/PointRCNN/PointRCNN.pth &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; pointrcnn &lt;span class=&quot;c&quot;&gt;# Install pakages and run an example following &lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# https://github.com/sshaoshuai/PointRCNN&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;PointRCNN sh build_and_install.sh &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tools python eval_rcnn.py &lt;span class=&quot;nt&quot;&gt;--cfg_file&lt;/span&gt; cfgs/default.yaml &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ckpt&lt;/span&gt; ../PointRCNN.pth &lt;span class=&quot;nt&quot;&gt;--batch_size&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--eval_mode&lt;/span&gt; rcnn &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; RPN.LOC_XZ_FINE False &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;share-docker-image&quot;&gt;Share docker image&lt;/h4&gt; &lt;p&gt;Create a account on &lt;a href=&quot;https://hub.docker.com/&quot;&gt;docker hub&lt;/a&gt; and share the above built docker image:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Login with Docker ID (from docker hub)&lt;/span&gt; docker login &lt;span class=&quot;c&quot;&gt;# push the image into Docker Hub.&lt;/span&gt; docker tag pointrcnn mnaminh1996/pointrcnn:latest docker push mnaminh1996/pointrcnn:latest &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;run-docker-container&quot;&gt;Run docker container&lt;/h4&gt; &lt;blockquote&gt; &lt;p&gt;Run docker container on the target machine&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Pull docker image and run a docker container on the target machine. Similarly, we have to install Docker + NVIDIA Container Toolkit on the target machine, refer &lt;a href=&quot;#pre-requirement&quot;&gt;Pre-requirement&lt;/a&gt;.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Pull the docker image from docker hub&lt;/span&gt; docker pull mnaminh1996/pointrcnn:latest &lt;span class=&quot;c&quot;&gt;# Run a docker container in interactive mode based on the docker image above&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# and blind-mount code, dataset, weight, etc&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--gpus&lt;/span&gt; all &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home/maiminh1996/PointRCNN/:/home/PointRCNN/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home/KITTI/data/:/home/PointRCNN/data/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /home/maiminh1996/PointRCNN/PointRCNN.pth:/home/PointRCNN/PointRCNN.pth &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; mnaminh1996/pointrcnn:latest &lt;span class=&quot;c&quot;&gt;# Install pakages and run an example following &lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# https://github.com/sshaoshuai/PointRCNN&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;PointRCNN sh build_and_install.sh &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tools python eval_rcnn.py &lt;span class=&quot;nt&quot;&gt;--cfg_file&lt;/span&gt; cfgs/default.yaml &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ckpt&lt;/span&gt; ../PointRCNN.pth &lt;span class=&quot;nt&quot;&gt;--batch_size&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--eval_mode&lt;/span&gt; rcnn &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; RPN.LOC_XZ_FINE False &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;pre-requirement&quot;&gt;Pre-requirement&lt;/h3&gt; &lt;h4 id=&quot;docker&quot;&gt;Docker&lt;/h4&gt; &lt;p&gt;Install Docker on the host machine and also on the target machine if it is not already installed &lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;https://docs.docker.com/engine/install/&lt;/a&gt;.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Update the package index and install the required packages&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apt-transport-https ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; curl gnupg-agent software-properties-common &lt;span class=&quot;c&quot;&gt;# Add the GPG key for the Docker repository&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add - &lt;span class=&quot;c&quot;&gt;# Add the Docker repository to ythe system&apos;s software stheces&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; stable&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Update the package manager&apos;s package list and install docker&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce docker-ce-cli containerd.io &lt;span class=&quot;c&quot;&gt;# Verify that Docker is installed correctly by running the following command&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;nvidia-container-toolkit&quot;&gt;NVIDIA Container Toolkit&lt;/h4&gt; &lt;p&gt;Install the NVIDIA Container Toolkit on the host machine &lt;a href=&quot;https://github.com/NVIDIA/nvidia-docker&quot;&gt;https://github.com/NVIDIA/nvidia-docker&lt;/a&gt;. This will allow you to run GPU-accelerated Docker containers.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Add the GPG key for the NVIDIA Container Toolkit package repository&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://nvidia.github.io/nvidia-docker/gpgkey | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add - &lt;span class=&quot;c&quot;&gt;# Add the package repository to ythe list of stheces&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /etc/os-release&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ID$VERSION_ID&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://nvidia.github.io/nvidia-docker/&lt;span class=&quot;nv&quot;&gt;$distribution&lt;/span&gt;/nvidia-docker.list | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/stheces.list.d/nvidia-docker.list &lt;span class=&quot;c&quot;&gt;# Install the `nvidia-docker2` package&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nvidia-docker2 &lt;span class=&quot;c&quot;&gt;# Restart the Docker daemon&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkill &lt;span class=&quot;nt&quot;&gt;-SIGHUP&lt;/span&gt; dockerd &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;!-- [docker](https://docs.docker.com/engine/install/), docker-compose, and Nvidia CUDA installed on ythe host system --&gt; &lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt; &lt;p&gt;Some keywords: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt;. For the complet list, refer to &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Pre-designed images:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://registry.hub.docker.com/r/nvidia/cuda/tags&quot;&gt;https://registry.hub.docker.com/r/nvidia/cuda/tags&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/pytorch/pytorch/tags?page=1&quot;&gt;https://hub.docker.com/r/pytorch/pytorch/tags?page=1&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;docker-image&quot;&gt;Docker image&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;docker image contains set of cmd and metadata. If Docker image was like a class, docker container is an instance&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Build a docker image&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;name-build-image&amp;gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# . where it contains Dockerfile&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;List, tag remove images&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Show images&lt;/span&gt; docker images &lt;span class=&quot;c&quot;&gt;# list all images&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# docker image ls&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# show the history of an image&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &amp;lt;image-id&amp;gt; &lt;span class=&quot;c&quot;&gt;# set image name from image-id&lt;/span&gt; docker tag &amp;lt;image-id&amp;gt; &amp;lt;image-names&amp;gt; &lt;span class=&quot;c&quot;&gt;# remove docker image&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# may need to resolve conflict with dependency container &lt;/span&gt; docker rmi &amp;lt;image-id&amp;gt; &lt;span class=&quot;c&quot;&gt;# docker image rm &amp;lt;image-id&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;docker-container&quot;&gt;Docker container&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;each container is an instance of un image.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Run a container (it actually creates a new container based on the specified image). We can use VS Code –&amp;gt; Activity bar –&amp;gt; Docker to modify code, manage docker images/ container/ …&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# show all images&lt;/span&gt; docker images &lt;span class=&quot;c&quot;&gt;# create a new container&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# run a container in interactive mode (-it), built-image: image id/ name&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &amp;lt;built-image&amp;gt; &lt;span class=&quot;c&quot;&gt;# list all containers&lt;/span&gt; docker ps &lt;span class=&quot;c&quot;&gt;# all running containers&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# docker ps -a # all containers (including stopped)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Stop, restart a container&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# stop&lt;/span&gt; docker stop &amp;lt;container-id&amp;gt; &lt;span class=&quot;c&quot;&gt;# docker rm &amp;lt;container-id&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# restart an existing container after it exited and the changes are still there.&lt;/span&gt; docker start &amp;lt;container-id&amp;gt; &lt;span class=&quot;c&quot;&gt;# restart it in the background&lt;/span&gt; docker attach &amp;lt;container-id&amp;gt; &lt;span class=&quot;c&quot;&gt;# reattach the terminal &amp;amp; stdin&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Commit a container (intead of working on old container, we can save container changes into new image).&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker commit &amp;lt;container-id&amp;gt; &amp;lt;new-image-name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Copy datas from container&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# copy data from a container to local machine&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &amp;lt;container-id&amp;gt;:app/epoch50.pth /path/ &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;blind-mount data&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# dataset stored in the /data directory on ythe host machine, &lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# and you want to mount this directory into a Docker container at /app/data. &lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data:/app/data &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &amp;lt;image_name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;save-docker-image&quot;&gt;Save docker image&lt;/h3&gt; &lt;h4 id=&quot;save-in-file-tar&quot;&gt;Save in file .tar&lt;/h4&gt; &lt;!-- https://dockerlabs.collabnix.com/beginners/saving-images-as-tar/ --&gt; &lt;p&gt;Save the docker image in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker save &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &amp;lt;built-image.tar&amp;gt; &amp;lt;built-image&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Or export a docker container in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &amp;lt;container-id&amp;gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &amp;lt;container-name.tar&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;push-on-docker-hub&quot;&gt;Push on docker hub&lt;/h4&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker login docker tag &amp;lt;local-image:tagname&amp;gt; &amp;lt;new-repo:tagname&amp;gt; docker push &amp;lt;new-repo:tagname&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;!-- Phương thức Mô tả Docker commands / &quot;By hand&quot; Tạo 1 container với docker run và input. Tạo 1 image qua docker commit . Dockerfile Xây dựng từ 1 image cơ bản, với build xác định cùng với số lượng command nhất định (recommend) . Dockerfile và configuration management (CM) tool Giống Dockerfile, nhưng kiểm soát để build thêm qua cộng cụ CM tool . Scratch image và import 1 vài file Từ 1 image rỗng, import 1 tar file với 1 vài file bắt buộc . https://blog.roboflow.com/nvidia-docker-vscode-pytorch/ --&gt; &lt;!-- ```dockerfile FROM nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04 # The submission directory contains the code and associated libraries that are # clonein future steps. RUN mkdir -p /code/submission WORKDIR /code/submission # Get packages needed for builds below. RUN apt-get update \ &amp;&amp; apt-get install -y wget unzip g++ git libgl1-mesa-glx \ libboost-all-dev llvm-10 libsm6 libxrender-dev \ &amp;&amp; rm -rf /var/lib/apt/lists/* RUN apt update &amp;&amp; \ apt install --no-install-recommends -y build-essential python3 python3-pip &amp;&amp; \ apt clean &amp;&amp; rm -rf /var/lib/apt/lists/* RUN apt-get update \ &amp;&amp; apt-get install -y python3-pip # Install the specific version of PyTorch recommended for the libraries below. RUN python3 -m pip install --upgrade pip \ &amp;&amp; python3 -m pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 -f https://download.pytorch.org/whl/torch_stable.html # CMake is required for builds. RUN wget https://github.com/Kitware/CMake/releases/download/v3.19.4/cmake-3.19.4-Linux-x86_64.tar.gz \ &amp;&amp; tar xf cmake-3.19.4-Linux-x86_64.tar.gz \ &amp;&amp; rm -f cmake-3.19.4-Linux-x86_64.tar.gz ENV CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.0 \ PATH=$PATH:/code/submission/cmake-3.19.4-Linux-x86_64/bin/ \ LLVM_CONFIG=/usr/bin/llvm-config-10 \ PYTHONPATH=/code/submission/lib:$PYTHONPATH \ TF_CPP_MIN_LOG_LEVEL=1 \ CUDA_HOME=/usr/local/cuda-11.0 # Install dependency. RUN git clone --recursive https://github.com/traveller59/spconv.git \ &amp;&amp; cd spconv \ &amp;&amp; python3 setup.py bdist_wheel \ &amp;&amp; cd dist \ &amp;&amp; python3 -m pip install * RUN git clone https://github.com/NVIDIA/apex \ &amp;&amp; cd apex \ &amp;&amp; git checkout 5633f6 \ &amp;&amp; python3 -m pip install -v --no-cache-dir --global-option=&quot;--cpp_ext&quot; --global-option=&quot;--cuda_ext&quot; ./ COPY ./vinDet3D-CenterBased ./vinDet3D-CenterBased ENV PYTHONPATH=&quot;${PYTHONPATH}:/code/submission/vinDet3D-CenterBased&quot; RUN cd vinDet3D-CenterBased \ &amp;&amp; python3 -m pip install -r requirements.txt \ &amp;&amp; bash setup.sh # Python should default to python3 for this code. RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 0 # Copy in the folder with the submission module and download the model weights # from https://github.com/open-mmlab/OpenPCDet/blob/master/README.md. COPY lib /code/submission/lib COPY ./epoch_26.pth /code/submission/lib/wod_latency_submission/WAYMO_MODEL_WEIGHTS.pth # Set the working directly correctly so to ensure access to some config files. WORKDIR /code/submission/vinDet3D-CenterBased ``` --&gt; &lt;!-- ### Debug --&gt; &lt;!-- Why need debugging https://www.quora.com/Why-do-you-need-to-debug-when-writing-code https://python.plainenglish.io/debugging-deep-learning-docker-containers-3815a44c9519 https://medium.com/@adityathiruvengadam/cuda-docker-%EF%B8%8F-for-deep-learning-cab7c2be67f9 --&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://maiminh1996.github.io/distilled/cuda/installing-cuda.html#multi-cuda-version-on-the-one-machine&quot;&gt;https://maiminh1996.github.io/distilled/cuda/installing-cuda.html#multi-cuda-version-on-the-one-machine&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/mnaminh1996/pointrcnn&quot;&gt;https://hub.docker.com/r/mnaminh1996/pointrcnn&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://registry.hub.docker.com/layers/nvidia/cuda/10.2-cudnn8-devel-ubuntu16.04/images/sha256-f32cdb7cfbd4fb047fe6580333ffd20204fdedc28742fa044885651d5af190f6?context=explore&quot;&gt;https://registry.hub.docker.com/layers/nvidia/cuda/10.2-cudnn8-devel-ubuntu16.04/images/sha256-f32cdb7cfbd4fb047fe6580333ffd20204fdedc28742fa044885651d5af190f6?context=explore&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/sshaoshuai/PointRCNN.git&quot;&gt;https://github.com/sshaoshuai/PointRCNN.git&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;https://docs.docker.com/engine/install/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/NVIDIA/nvidia-docker&quot;&gt;https://github.com/NVIDIA/nvidia-docker&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://registry.hub.docker.com/r/nvidia/cuda/tags&quot;&gt;https://registry.hub.docker.com/r/nvidia/cuda/tags&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/pytorch/pytorch/tags?page=1&quot;&gt;https://hub.docker.com/r/pytorch/pytorch/tags?page=1&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; </description> <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2022/docker/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2022/docker/</guid> <category>docker</category> <category>cuda</category> <category>installing</category> </item> <item> <title>Loss function</title> <description>&lt;!-- &lt;b&gt;Last modified: &lt;script&gt;document.write( document.lastModified );&lt;/script&gt; --&gt; &lt;p&gt;Some basic loss defined in pytorch. Sometimes loss definition in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.nn&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn&lt;/code&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.nn.functional&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt;) can confuse us.&lt;/p&gt; &lt;p&gt;Notes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;regression: predict a real-value quantity&lt;/li&gt; &lt;li&gt;classification: predict a probability (need a non-linear activation function)&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;negative-log-likelihood-loss&quot;&gt;Negative Log Likelihood Loss&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;[classification] It is useful to train a classification problem with C classes.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.NLLLoss(input, target)&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.nll_loss()&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;input: (N, C), or \((N, C, d_{1}, d_{2}, ..., d_K)\) with \(K \geq 1\) in the case of K-dimensional loss.&lt;/li&gt; &lt;li&gt;target: (N), or \((N, d_{1}, d_{2}, ..., d_{K})\) with \(K \geq 1\) in the case of K-dimensional loss.&lt;/li&gt; &lt;li&gt;output: scalar. If reduction is none, then the same size as the target: (N), or \((N, d_{1}, d_{2}, ..., d_{K})\) with \(K \geq 1\) in the case of K-dimensional loss.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LogSoftmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NLLLoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# input is of size N x C = 3 x 5 &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# each element in target has to have 0 &amp;lt;= value &amp;lt; C &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# scalar &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 2D loss example (used, for example, with image inputs) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NLLLoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, C, H, W) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Conv2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LogSoftmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# dim --&amp;gt; # each element in target has to have 0 &amp;lt;= value &amp;lt; C &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, 8, 8) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, C, 8, 8) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# scalar &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# loss example (used, for example, with pcl inputs) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NLLLoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_softmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#, feature_transform &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, L, 3), 3: x, y, z &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, L, C), m dim: -1 or 2 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, L) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N*L) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N*L, C) &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# scalar &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;!-- ## poisson_nll_loss &gt; Poisson negative log likelihood loss. --&gt; &lt;h2 id=&quot;cross-entropy-loss&quot;&gt;Cross Entropy Loss&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;[classification] Cross Entropy Loss, also called logarithmic loss, log loss or logistic loss&lt;/p&gt; &lt;/blockquote&gt; \[L_{CE} = - \sum_{i=1}^{n} t_{i}log(p_{i}),\] &lt;p&gt;where, \(t_{i}\) is the truth label and \(p_{i}\) is the softmax probability for \(i^{th}\) class.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.CrossEntropyLoss(input, target)&lt;/code&gt;&lt;br /&gt;== &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.cross_entropy()&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.nll_loss(F.log_softmax(input, 1), target)&lt;/code&gt;. &lt;span style=&quot;color:red&quot;&gt;In Pytorch, these criterion combines &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_softmax&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nll_loss&lt;/code&gt; in a single function&lt;/span&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;input: (N, C), (N, C, H, W)&lt;/li&gt; &lt;li&gt;target: (N) where each value is \(0 \leq \text{targets}[i] \leq C-1\), or \((N, d_1, d_2, ..., d_K)\) where \(K \geq 1\) for K-dimensional loss.&lt;/li&gt; &lt;li&gt;output: scalar. If reduction is none, then the same size as the target (N), or \((N, d_1, d_2, ..., d_K)\) with \(K \geq 1\) in the case of K-dimensional loss.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Example of target with class indices &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CrossEntropyLoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# scalar &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Example of target with class probabilities &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;softmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;binary-cross-entropy&quot;&gt;Binary Cross Entropy&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;[classification] Cross Entropy Loss, also referred as Logarithmic loss&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;The problem is framed as predicting the likelihood of an example belonging to class one, e.g. the class that you assign the integer value 1, whereas the other class is assigned the value 0.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.BCELoss(input, target)&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.binary_cross_entropy()&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;input: Tensor of arbitrary shape&lt;/li&gt; &lt;li&gt;target: Tensor of the same shape as input&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;binary_cross_entropy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sigmoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Function that measures Binary Cross Entropy between target and output logits. This loss combines a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sigmoid&lt;/code&gt; layer and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BCELoss&lt;/code&gt; in one single&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.BCEWithLogitsLoss(input, target)&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.binary_cross_entropy_with_logits()&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BCEWithLogitsLoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;smooth-l1-loss&quot;&gt;Smooth L1 Loss&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;[regression]&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Function that uses a &lt;a href=&quot;#mse-loss&quot;&gt;squared term&lt;/a&gt; if the absolute element-wise error falls below \(\beta\) (1 by default) and an &lt;a href=&quot;#mae-loss&quot;&gt;L1 term&lt;/a&gt; otherwise. It is less sensitive to outliers than the &lt;a href=&quot;#mse-loss&quot;&gt;MSELoss&lt;/a&gt; and in some cases prevents exploding gradients (e.g. see Fast R-CNN paper by Ross Girshick).&lt;/p&gt; \[L_{Smooth\ L1} = \frac{1}{n} \sum_{i} z_{i}\] &lt;p&gt;where \(z_{i}\) is given by:&lt;/p&gt; \[z_{i} = \begin{cases} 0.5 (x_i - y_i)^2 / \beta, &amp;amp; \text{if } |x_i - y_i| &amp;lt; \beta \\ |x_i - y_i| - 0.5 * \beta, &amp;amp; \text{otherwise } \end{cases}\] &lt;p&gt;\(x\) and \(y\) arbitrary shapes with a total of \(n\) elements each the sum operation still operates over all the elements, and divides by \(n\).&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.SmoothL1Loss(input, target)&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.smooth_l1_loss()&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;input: (*)&lt;/li&gt; &lt;li&gt;target: (*), same shape as the input.&lt;/li&gt; &lt;li&gt;output: scalar. If reduction is ‘none’, then (*), same shape as the input.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SmoothL1Loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default reduction=&apos;mean&apos; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# scalar &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;mse-loss&quot;&gt;MSE Loss&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;[regression] Mean Squared Error (MSE) Loss, also called L2 norm&lt;/p&gt; &lt;/blockquote&gt; \[L_{MSE} = \frac{1}{n}\sum_{i=1}^{n}\left ( Y_{i} - \hat{Y}_{i} \right )^{2}\] &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.MSELoss(input, target)&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.mse_loss()&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;input: (N, *)&lt;/li&gt; &lt;li&gt;target: (N, *)&lt;/li&gt; &lt;li&gt;ouput: scalar&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default reduction=&apos;mean&apos; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# scalar # torch.square(input-target).mean() &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# loss1 = nn.MSELoss(reduction=&apos;sum&apos;) # output1 = loss1(input, target) # scalar # torch.square(input-target).sum() &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;l2-loss&quot;&gt;L2 Loss&lt;/h2&gt; &lt;p&gt;L2 loss is another name for &lt;a href=&quot;#mse-loss&quot;&gt;Mean Squared Error (MSE) Loss&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;mae-loss&quot;&gt;MAE Loss&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;[regression] Mean Absolute Error (MAE) Loss, also called L1 norm&lt;/p&gt; &lt;/blockquote&gt; \[L_{MAE} = \frac{1}{n}\sum_{i=1}^{n}\left | Y_{i} - \hat{Y}_{i} \right |\] &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.L1Loss(input, target)&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F.l1_loss()&lt;/code&gt; == &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.L1Loss()&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;input: (N, *)&lt;/li&gt; &lt;li&gt;target: (N, *)&lt;/li&gt; &lt;li&gt;ouput: scalar&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;L1Loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires_grad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# torch.abs(input-target).mean() &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# loss1 = nn.L1Loss(reduction=&apos;sum&apos;) # output1 = loss1(input, target) # scalar # torch.abs(input-target).sum() &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;l1-loss&quot;&gt;L1 Loss&lt;/h2&gt; &lt;p&gt;L1 loss is another name for &lt;a href=&quot;#mae-loss&quot;&gt;Mean Absolute Error (MAE) Loss&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://pytorch.org/docs/stable/nn.functional.html#loss-functions&quot;&gt;https://pytorch.org/docs/stable/nn.functional.html#loss-functions&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; </description> <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate> <link>https://maiminh1996.github.io//blog/2022/loss-function/</link> <guid isPermaLink="true">https://maiminh1996.github.io//blog/2022/loss-function/</guid> <category>pytorch</category> <category>Deep-Learning</category> <category>Machine-Learning</category> </item> </channel> </rss>