<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MAI Minh Blog</title>
    <description>Computer Science Blog | Nguyen Anh Minh MAI, Computer Vision Research Scientist</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 29 Jul 2022 22:20:35 +0200</pubDate>
    <lastBuildDate>Fri, 29 Jul 2022 22:20:35 +0200</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>Pihole Camera</title>
        <description>&lt;h1 id=&quot;camera-model&quot;&gt;Camera Model&lt;/h1&gt;

&lt;h2 id=&quot;pihole-camera&quot;&gt;Pihole camera&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;The simplest camera model is pinhole model which decribes the mathematical relationship of the projection of points in 3d-space onto a image plane.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/camera/pinhole_camera.png&quot; alt=&quot;drawing&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;issues-with-pinhole-camera&quot;&gt;Issues with pinhole camera:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/camera/diff_lens.png&quot; alt=&quot;drawing&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Larger aperture $\rightarrow$  greater number of light rays that pass through the aperture $\rightarrow$  blur&lt;/li&gt;
  &lt;li&gt;Smaller aperture $\rightarrow$  fewer number of light rays that pass through the aperture $\rightarrow$  darkness (+ diffraction)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$\rightarrow$ Solution: add a lens to replace the aperture! Lens: an optical element that focuses light by means of refraction&lt;/p&gt;

&lt;h3 id=&quot;lenses&quot;&gt;Lenses&lt;/h3&gt;

&lt;h3 id=&quot;thin-lens-model&quot;&gt;Thin lens model&lt;/h3&gt;

&lt;p&gt;https://stanfordasl.github.io/aa274a/pdfs/lecture/lecture_7.pdf&lt;/p&gt;

&lt;h2 id=&quot;perspective-projection&quot;&gt;Perspective projection&lt;/h2&gt;

&lt;p&gt;Project a point $P_{W}$ in world coord ($OXYZ$) into a point $p(u, v)$ in pixel coord:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#1-project-a-point-in-world-coord-into-a-point-in-cam-coord&quot;&gt;Project a point $P_{W}$ in world coord into a point $P_{C}$ in cam coord&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-project-the-point-in-cam-coord-into-a-point-in-the-image-plane&quot;&gt;Project $P_{C}$ into a point $p(x, y)$ in the image plane&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-project-the-point-in-the-image-plane-into-a-pixel-in-pixel-coord&quot;&gt;Project $p(x, y)$ into a pixel $(u, v)$ in pixel coord&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-project-a-point-in-world-coord-into-a-point-in-cam-coord&quot;&gt;1 Project a point in world coord into a point in cam coord&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Goal: Projecting $P_{W}(X_{W}, Y_{W}, Z_{W})$ (World coord) $\rightarrow$ $P_{C}(X_{C}, Y_{C}, Z_{C})$ (Cam coord). &lt;br /&gt;Assumption: pinhole camera model (all results also hold under thin lens model, assuming camera is focused at ∞)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/camera/cam_world_coord.png&quot; alt=&quot;drawing&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have $P_{C} = t + RP_{W}$, where $t$ and $R$ are the translation vector the rotation matrix relating camera and world frames respectively. Presentation in in homogeneous coordinates:&lt;/p&gt;

\[\begin{pmatrix}
P_{C}\\ 
1
\end{pmatrix}_{(4\times1)}
=
\begin{bmatrix}
R &amp;amp; t\\ 
1 &amp;amp; 1
\end{bmatrix}_{(4\times4)} 
\begin{pmatrix}
P_{W}\\ 
1
\end{pmatrix}_{(4\times1)}\]

&lt;p&gt;$\rightarrow$ Requiements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extrinsics parameters&lt;/code&gt;: translation vector $t$ (3 params) and the rotation matrix $R$ (3 params).&lt;/p&gt;

&lt;h3 id=&quot;2-project-the-point-in-cam-coord-into-a-point-in-the-image-plane&quot;&gt;2 Project the point in cam coord into a point in the image plane&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Goal: Projecting $P_{C}(X_{C}, Y_{C}, Z_{C})$ (World coord) $\rightarrow$ $p(x, y)$ (image plane)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/camera/cam_coord_image_plane.png&quot; alt=&quot;drawing&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have&lt;/p&gt;

\[\begin{pmatrix}
x\\
y
\end{pmatrix}
=
\begin{pmatrix}
f\frac{X_{C}}{Z_{C}}\\
f\frac{Y_{C}}{Z_{C}}
\end{pmatrix}\]

&lt;h3 id=&quot;3-project-the-point-in-the-image-plane-into-a-pixel-in-pixel-coord&quot;&gt;3 Project the point in the image plane into a pixel in pixel coord&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Goal: Projecting $p(x, y)$ (image plane) $\rightarrow$ $(u, v)$ (pixel coord)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actual origin of the camera coordinate system is usually at a corner (e.g., top left, bottom left)&lt;/p&gt;

\[\begin{pmatrix}
\widetilde{x}\\
\widetilde{y}
\end{pmatrix}
=
\begin{pmatrix}
f\frac{X_{C}}{Z_{C}} + \widetilde{x}_{0}\\
f\frac{Y_{C}}{Z_{C}} + \widetilde{y}_{0}
\end{pmatrix}\]

&lt;p&gt;Converting from image coordinates ($\widetilde{x}, \widetilde{x}$) to pixel coordinates $(u, v)$&lt;/p&gt;

\[\begin{pmatrix}
u\\
v
\end{pmatrix}
=
\begin{pmatrix}
k_{x}\widetilde{x}\\
k_{x}\widetilde{y}
\end{pmatrix}
=
\begin{pmatrix}
k_{x}f\frac{X_{C}}{Z_{C}} + k_{x}\widetilde{x}_{0}\\
k_{y}f\frac{Y_{C}}{Z_{C}} + k_{y}\widetilde{y}_{0} 
\end{pmatrix}
=
\begin{pmatrix}
\alpha \frac{X_{C}}{Z_{C}} + u_{0}\\
\beta f\frac{Y_{C}}{Z_{C}} + v_{0} 
\end{pmatrix}\]

&lt;p&gt;where $k_{x}$ and $k_{y}$ be the number of pixels per unit distance in image coordinates in the x and y directions, respectively.&lt;/p&gt;

&lt;p&gt;$\rightarrow$ Requiements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intrinsics parameters&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$f$: &lt;strong&gt;focal length&lt;/strong&gt; (distance between the lens and the focal point)&lt;/li&gt;
  &lt;li&gt;$\alpha$: &lt;strong&gt;aspect ratio&lt;/strong&gt; (1 unless pixels are not square)&lt;/li&gt;
  &lt;li&gt;($u_{0}, v_{0}$): &lt;strong&gt;principal point&lt;/strong&gt; ((0,0) unless optical axis doesn’t intersect projection plane at origin)&lt;/li&gt;
  &lt;li&gt;$\gamma$: &lt;strong&gt;skew&lt;/strong&gt; (0 unless pixels are shaped like rhombi/parallelograms)&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Finally, from both equations we have:

![img](/img/projection_image2.png)

with `\alpha` aspect ratio = 1, `s` skew = 0, `(cx, cy)` = (0, 0):

![img](/img/projection_image3.png)

convert from image coordinates (sx, sy) to pixel coordinates (u, v)

Let kx and ky be the number of pixels per unit distance in image coordinates in the x and y directions, respectively

https://stanfordasl.github.io/aa274a/pdfs/lecture/lecture_8.pdf


### Homogeneous coordinates
- Goal: represent the transformation as a linear mapping
- Key idea: introduce homogeneous coordinates --&gt;

&lt;p&gt;&lt;strong&gt;Degrees of freedom&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Intrinsics parameters:&lt;/li&gt;
  &lt;li&gt;Extrinsics parameters: 
&lt;!-- - 4 for K (or 5 if we also include skewness), 3 for R, and 3 for t. Total is 10 (or 11 if we include skewness) --&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REF:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.cornell.edu/courses/cs4670/2015sp/lectures/lec15_projection_web.pdf&quot;&gt;cs4670/2015sp/lectures/lec15_projection_web.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;../doc/lec15_projection_web.pdf&quot;&gt;lec15_projection_web.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2022 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/2022/07/29/pihole-camera/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/07/29/pihole-camera/</guid>
        
        <category>image processing</category>
        
        <category>camera</category>
        
        <category>calibration</category>
        
        
      </item>
    
      <item>
        <title>Camera Calibration</title>
        <description>
</description>
        <pubDate>Fri, 29 Jul 2022 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/2022/07/29/camera-calibration/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/07/29/camera-calibration/</guid>
        
        
      </item>
    
  </channel>
</rss>
